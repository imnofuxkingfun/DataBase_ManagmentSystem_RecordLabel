--SERBA IOANA RALUCA GRUPA 241 SGBD EXERCITII PROIECT 4-13
--4  
--CREAREA UNEI SECVENTE CE VA FI UTILIZATA IN INSERAREA INREGISTRARILOR IN TABEL
CREATE SEQUENCE CASA_DISCURI_SEQ START WITH 1;
CREATE SEQUENCE CONTRACT_SEQ START WITH 1;
CREATE SEQUENCE MUZICIAN_SEQ START WITH 1;
CREATE SEQUENCE TRUPA_SEQ START WITH 1;
CREATE SEQUENCE INSTRUMENT_SEQ START WITH 1;
CREATE SEQUENCE CANTEC_SEQ START WITH 1;
CREATE SEQUENCE ALBUM_SEQ START WITH 1;
CREATE SEQUENCE ANGAJAT_SEQ START WITH 1;
CREATE SEQUENCE MANAGER_TRUPA_SEQ START WITH 1;
CREATE SEQUENCE ADMINISTRATOR_CONTRACTE_SEQ START WITH 1;
CREATE SEQUENCE CERCETATOR_MARKETING_SEQ START WITH 1;
CREATE SEQUENCE INGINER_AUDIO_SEQ START WITH 1;


---------------------------

--casa discuri
DECLARE
    AN_CURENT varchar2(4);
BEGIN

    AN_CURENT := TO_CHAR(SYSDATE,'YYYY');
    execute immediate 'CREATE TABLE CASA_DISCURI (
    ID_CASA_DISCURI INT DEFAULT CASA_DISCURI_SEQ.nextval PRIMARY KEY,
    NUME VARCHAR2(40) NOT NULL UNIQUE,
    ADRESA VARCHAR2(255),
    WEBSITE VARCHAR2(255),
    AN_INFIINTARE NUMBER,
    CONSTRAINT VERIFICARE_AN2 CHECK (AN_INFIINTARE >= 1889 AND AN_INFIINTARE <=' || AN_CURENT || '))';

END;



----------------------
--muzician
CREATE TABLE MUZICIAN
(
    ID_MUZICIAN INT DEFAULT MUZICIAN_SEQ.nextval PRIMARY KEY,
    NUME VARCHAR2(40) NOT NULL,
    ZI_NASTERE  DATE,
    GEN VARCHAR2(20)
);


-------------------------------------
--contract
CREATE TABLE CONTRACT(
    ID_CONTRACT INT DEFAULT CONTRACT_SEQ.nextval PRIMARY KEY,
    ID_MUZICIAN INT,
    ID_CASA_DISCURI INT,
    DATA_SEMNARE DATE NOT NULL,
    DATA_EXPIRARE DATE NOT NULL,
    FOREIGN KEY (ID_CASA_DISCURI) REFERENCES CASA_DISCURI(ID_CASA_DISCURI),
    FOREIGN KEY (ID_MUZICIAN) REFERENCES MUZICIAN(ID_MUZICIAN)
);


--------------------------------------
--trupa
CREATE TABLE TRUPA(
    ID_TRUPA INT DEFAULT TRUPA_SEQ.nextval PRIMARY KEY,
    NUME VARCHAR2(40) NOT NULL UNIQUE,
    GEN VARCHAR2(60) NOT NULL,
    DATA_INFIINTARE DATE NOT NULL
);



---------------------------
--membru trupa
CREATE TABLE MEMBRU_TRUPA(
    ID_MUZICIAN INT,
    ID_TRUPA INT,
    POZITIE VARCHAR2(40) NOT NULL,
    CONSTRAINT ID_MEMBRU_TRUPA PRIMARY KEY (ID_MUZICIAN, ID_TRUPA),
    FOREIGN KEY (ID_MUZICIAN) REFERENCES MUZICIAN(ID_MUZICIAN),
    FOREIGN KEY (ID_TRUPA) REFERENCES TRUPA(ID_TRUPA),
    CONSTRAINT POZITIE_CHECK CHECK(UPPER(POZITIE) IN 
    ('VOCALIST','CHITARIST','BASIST','CLAVIATURA','TOBOSAR', 'PIANIST'))
);


--------------------------------------
--instrument
CREATE TABLE INSTRUMENT(
    ID_INSTRUMENT INT DEFAULT INSTRUMENT_SEQ.nextval PRIMARY KEY,
    ID_TRUPA INT,
    NUME VARCHAR2(40) NOT NULL,
    UTILIZATOR VARCHAR2(40),
    FOREIGN KEY (ID_TRUPA) REFERENCES TRUPA(ID_TRUPA),
    CONSTRAINT UTILIZATOR_CHECK CHECK (UPPER(UTILIZATOR)
    IN ('VOCALIST', 'CHITARIST', 'BASIST','CLAVIATURA','TOBOSAR','PIANIST'))
);


---------------------------------------
--cantec
CREATE TABLE CANTEC(
    ID_CANTEC INT DEFAULT CANTEC_SEQ.nextval PRIMARY KEY,
    NUME VARCHAR2(255) NOT NULL,
    LUNGIME NUMBER(4,2) NOT NULL,
    CONSTRAINT LUNGIME_CHECK CHECK ( LUNGIME > 0 )
);



-----------------------------------
--trupa cantec
CREATE TABLE TRUPA_CANTEC(
    ID_TRUPA INT,
    ID_CANTEC INT,
    CONSTRAINT ID_TRUPA_CANTEC PRIMARY KEY (ID_TRUPA,ID_CANTEC),
    FOREIGN KEY (ID_TRUPA) REFERENCES TRUPA(ID_TRUPA),
    FOREIGN KEY (ID_CANTEC) REFERENCES CANTEC(ID_CANTEC)
);


-------------------------
--album
CREATE TABLE ALBUM(
    ID_ALBUM INT DEFAULT ALBUM_SEQ.nextval PRIMARY KEY,
    ID_TRUPA INT,
    ID_CASA_DISCURI INT,
    NUME VARCHAR2(255) NOT NULL,
    TIP VARCHAR2(10) NOT NULL,
    DATA_LANSARE DATE,
    FOREIGN KEY (ID_TRUPA) REFERENCES TRUPA(ID_TRUPA),
    FOREIGN KEY (ID_CASA_DISCURI) REFERENCES CASA_DISCURI(ID_CASA_DISCURI),
    CONSTRAINT TIP_CHECK CHECK ( UPPER(TIP) IN ('EP','ALBUM','SINGLE') )
);



-------------------------------------
--cantec_album
CREATE TABLE CANTEC_ALBUM(
    ID_ALBUM,
    ID_CANTEC,
    CONSTRAINT ID_CANTEC_ALBUM PRIMARY KEY (ID_ALBUM, ID_CANTEC),
    FOREIGN KEY (ID_CANTEC) REFERENCES CANTEC(ID_CANTEC),
    FOREIGN KEY (ID_ALBUM) REFERENCES ALBUM(ID_ALBUM)
);


-------------------------
--angajat
CREATE TABLE ANGAJAT(
    ID_ANGAJAT INT DEFAULT ANGAJAT_SEQ.nextval PRIMARY KEY,
    ID_CASA_DISCURI INT,
    NUME VARCHAR2(40) NOT NULL,
    SALARIU NUMBER NOT NULL,
    DEPARTAMENT VARCHAR2(40) NOT NULL,
    DATA_ANGAJARE DATE NOT NULL,
    FOREIGN KEY (ID_CASA_DISCURI) REFERENCES CASA_DISCURI(ID_CASA_DISCURI),
    CONSTRAINT SALARIU_CHECK CHECK(SALARIU > 0)
);



------------------------------------
--manager trupa
CREATE TABLE MANAGER_TRUPA(
    ID_MANAGER_TRUPA INT DEFAULT MANAGER_TRUPA_SEQ.nextval PRIMARY KEY,
    ID_TRUPA INT,
    ID_ANGAJAT INT,
    FOREIGN KEY (ID_TRUPA) REFERENCES TRUPA(ID_TRUPA),
    FOREIGN KEY (ID_ANGAJAT) REFERENCES ANGAJAT(ID_ANGAJAT)
);

--------------------------
--administrator contracte
CREATE TABLE ADMINISTRATOR_CONTRACTE(
    ID_ADMINISTRATOR_CONTRACTE INT DEFAULT ADMINISTRATOR_CONTRACTE_SEQ.nextval PRIMARY KEY,
    ID_ANGAJAT INT,
    SPECIALITATE VARCHAR2(40),
    FOREIGN KEY (ID_ANGAJAT) REFERENCES ANGAJAT(ID_ANGAJAT)
);

------------------------
--cercetator marketing
CREATE TABLE CERCETATOR_MARKETING(
    ID_CERCETATOR_MARKETING INT DEFAULT CERCETATOR_MARKETING_SEQ.nextval PRIMARY KEY,
    ID_ANGAJAT INT,
    CATEGORIE VARCHAR2(40),
    FOREIGN KEY (ID_ANGAJAT) REFERENCES ANGAJAT(ID_ANGAJAT)
);


------------------------
--inginer audio
CREATE TABLE INGINER_AUDIO(
    ID_INGINER_AUDIO INT DEFAULT INGINER_AUDIO_SEQ.nextval PRIMARY KEY,
    ID_ANGAJAT INT,
    SPECIALITATE_GEN VARCHAR2(40),
    FOREIGN KEY (ID_ANGAJAT) REFERENCES ANGAJAT(ID_ANGAJAT)
);



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--5
--CD
INSERT INTO CASA_DISCURI (NUME, WEBSITE, AN_INFIINTARE)
VALUES ('Reprise Records', 'warnerrecords.com', 1960);


INSERT INTO CASA_DISCURI (NUME, ADRESA, WEBSITE, AN_INFIINTARE)
VALUES ('Eyeball Records',  'New York City', 'https://www.eyeballrecords.org/ ', 1995);


INSERT INTO CASA_DISCURI (NUME, ADRESA, WEBSITE, AN_INFIINTARE)
VALUES ('UNDF', 'Melbourne, Victoria', 'https://unfdcentral.com', 2011);


INSERT INTO CASA_DISCURI (NUME, ADRESA, WEBSITE, AN_INFIINTARE)
VALUES ('GROBB', 'Vancouver, Canada', 'http://www.friendsoftheblues.org/', 2024);

INSERT INTO CASA_DISCURI (NUME, WEBSITE, AN_INFIINTARE)
VALUES ('Mercury Records', 'https://www.mercuryrecords.com/', 1945);

--muzician
INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Gerard Way', DATE '1977-04-09', 'x');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Mikey Way', DATE '1980-09-10' , 'm');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Ray Toro', DATE '1977-07-15' , 'm');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Frank Iero', DATE '1981-10-31', 'm');

INSERT INTO MUZICIAN (NUME, GEN)
VALUES ('Evan Nestor', 'm');

INSERT INTO MUZICIAN (NUME, GEN)
VALUES ('Kayleigh Goldsworthy', 'f');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Doctor Sung', DATE'1998-05-26' , 'alien');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Commander Meouch', DATE'1996-04-14' , 'lion');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Lord Phobos',DATE '1993-11-11' , 'cyclops');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Haave Hogan',DATE '1996-01-23', 'robot');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Tom Cardy',DATE '1997-06-12', 'm');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Freddy Mercury',DATE '1946-09-05', 'm');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Brian May',DATE '1947-07-19', 'm');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('John Deacon',DATE '1951-09-19', 'm');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Roger Taylor',DATE '1949-07-26', 'm');

--contract

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (1,1,DATE '2003-08-31',DATE '2006-08-31');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (2,1,DATE'2003-08-31',DATE'2006-08-31');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (3,1,DATE'2003-08-31',DATE'2006-08-31');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (4,1,DATE'2003-08-31',DATE'2006-08-31');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (1,2,DATE'2013-11-24',DATE'2015-11-24');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (5,3,DATE'2019-03-21',DATE'2021-03-21');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (6,3,DATE'2019-03-21',DATE'2021-03-21');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (7,4,DATE'2024-02-22',DATE'2027-02-22');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (8,4,DATE'2024-02-22',DATE'2027-02-22');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (9,4,DATE'2024-02-22',DATE'2027-02-22');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (10,4,DATE'2024-02-22',DATE'2027-02-22');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (12,5,DATE'1975-10-21',DATE'1975-10-21');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (13,5,DATE'1975-10-21',DATE'1975-10-21');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (14,5,DATE'1975-10-21',DATE'1975-10-21');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (15,5,DATE'1975-10-21',DATE'1975-10-21');

--trupa
INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('My Chemical Romance','Alternative rock', DATE '2001-09-18');

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Gerard Way','Alternative rock',DATE '2012-12-20');

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Frank Iero','Punk rock',DATE '2014-06-09');

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('The Future Violents','Alternative rock', DATE'2018-11-13');

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('TWRP','Funk rock',DATE '2011-04-05');

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Tom Cardy','Musical Comedy', DATE'2023-07-06');

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Queen','Progressive Rock', DATE'1970-02-28');

--membru trupa
INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (1,1,'Vocalist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (2,1,'Basist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (3,1,'Chitarist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (4,1,'Chitarist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (1,2,'Vocalist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (4,3,'Vocalist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (5,4,'Chitarist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (6,4,'Claviatura');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (7,5,'Claviatura');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (8,5,'Basist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (9,5,'Chitarist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (10,5,'Tobosar');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (11,6,'Vocalist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (12,7,'Vocalist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (13,7,'Chitarist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (14,7,'Basist');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (15,7,'Tobosar');


INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (1,'Gibson Les Paul Standard','Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (1,'Limited Edition Mikey Way Jazz Bass', 'Basist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (1,'Epiphone Les Paul Custom PANSY', 'Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (3,'Joyriding Epiphone Wilshire Phantomatic','Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (3,'Danelectro DC-3', 'Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (4,'Fender Stratocaster', 'Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (4,'Yamaha DX100', 'Claviatura');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (5,'Roland AX-Synth', 'Claviatura');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (5,'Music Man Sterling Ray 34', 'Basist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (5,'Suhr Classic S', 'Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (5,'Ludwig Black Oyster Pearl Kit', 'Tobosar');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (7,'Yamaha baby grand piano', 'Pianist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (7,'Brian May Red Special', 'Chitarist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (7,'Fender Precision Bass', 'Basist');

INSERT INTO INSTRUMENT (ID_TRUPA, NUME, UTILIZATOR)
VALUES (7,'Ludwig Classic in Silver Sparkle', 'Tobosar');

--cantec
INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Helena',3.24);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('I''m Not Okay(I Promise)',3.06);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('The Ghost Of You', 3.14);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Interlude',0.57);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Thank You for the Venom',3.41);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('To the End',3.01);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('I Never Told You What I Do for a Living',3.52);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('No Shows',4.12);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Violence',3.53);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Sewerwolf',3.50);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Record Ender',6.37);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Digital Nightmare',2.14);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Content 4 U',4.29);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('HTMLOVE',4.48);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Online',4.14);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Dance Floor Cold War',3.56);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Firewall',4.00);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('A Human''s Touch',4.51);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('We Will Rock You',2.02);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('We Are The Champions',2.59);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Spread Your Wings',4.34);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Killer Queen',3.00);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Bohemian Rhapsody',5.54);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('I Want To Break Free',4.18);

--trupa cantec

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,1);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,2);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,3);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,4);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,5);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,6);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (1,7);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (2,8);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (3,9);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (4,9);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (3,10);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (4,10);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (4,11);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,12);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,13);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,14);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,15);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (6,15);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,16);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,17);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,18);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (7,19);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (7,20);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (7,21);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (7,22);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (7,23);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (7,24);

--album

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(1,1,'Helena','Single', DATE '2004-04-16');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(1,1,'Three Cheers For Sweet Revenge','Album', DATE '2004-06-08');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(2,2,'No Shows','Single', DATE '2014-08-19');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(4,3,'Barriers','EP', DATE '2019-03-31');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(5,4,'Digital Nightmare','Album', DATE '2024-04-22');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(5,4,'Online','Single', DATE '2024-03-31');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(7,5,'News Of The World','EP', DATE '1977-10-28');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(7,5,'Best Hits','Album', DATE '2001-09-13');

--cantec album

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(1,1); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,1); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,2); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,3); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,4); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,5); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,6); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(2,7); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(3,8);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(4,9); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(4,10);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(4,11);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,12); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,13); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,14); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,15); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,16); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,17); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(5,18); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(6,15);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(7,19);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(7,20);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(7,21);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(8,19);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(8,20);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(8,22);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(8,23);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(8,24);

--ANGAJATI!
--band managers
INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (1,'Brian Schechter',10500,'Management',DATE '2002-07-09');--1

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (2,'Lola Bandit',9444,'Management',DATE '2009-08-19');--2

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (3,'Tucker Rule',6500,'Management',DATE '2016-10-20');--4

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (4,'Dylan Dove',7900,'Managment',DATE '2020-06-21');--5

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (5,'Jim Beach',35800,'Managment',DATE '1989-01-13');--7

--administratori contracte
INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (1, 'Harley Quinn', 3200, 'Administrativ', DATE '2018-05-14');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (2, 'Geralt Rivia', 8300, 'Administrativ', DATE '2000-01-19');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (3, 'Sam Winchester', 15800, 'Administrativ', DATE '2011-05-21');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (4, 'Zane Icero', 6900, 'Administrativ', DATE '2016-02-09');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (5, 'John Doe', 4500, 'Administrativ', DATE '2003-03-22');

--cercetator marketing
INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (1, 'Jane Doe', 6700, 'Marketing', DATE '2019-09-10');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (2, 'Tim Curry', 9000, 'Marketing', DATE '2020-10-14');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (3, 'Kai Firre', 7900, 'Marketing', DATE '2022-03-05');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (4, 'Miguel O''hara', 6300, 'Marketing', DATE '1996-07-17');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (5, 'Cardinal Copia', 7700, 'Marketing', DATE '1989-08-05');


--inginer audio
INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (4, 'Miles Morales', 6600, 'Audio', DATE '2014-06-16');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (2, 'Cass Tiel', 8400, 'Audio', DATE '2014-09-19');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (3, 'Cole Wearth', 5500, 'Audio', DATE '2002-04-15');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (5, 'Peter Parker', 7400, 'Audio', DATE '2016-11-25');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (1, 'Dean Winchester', 5300, 'Audio', DATE '2012-07-07');

--others
INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (5, 'Bobby Singer', 6700, 'Productie', DATE '2018-12-03');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (4, 'Nya Walter', 7200, 'Productie', DATE '2015-11-11');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (2, 'Jay Litting', 8500, 'Vanzari', DATE '2017-01-30');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (1, 'Clark Kent', 5100, 'Financiar', DATE '2014-04-01');

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (3, 'Bruce Wayne', 9200, 'Financiar', DATE '1999-02-28');

--manager trupa
INSERT INTO MANAGER_TRUPA(ID_TRUPA, ID_ANGAJAT)
VALUES (1,1);

INSERT INTO MANAGER_TRUPA(ID_TRUPA, ID_ANGAJAT)
VALUES (2,2);

INSERT INTO MANAGER_TRUPA(ID_TRUPA, ID_ANGAJAT)
VALUES (4,3);

INSERT INTO MANAGER_TRUPA(ID_TRUPA, ID_ANGAJAT)
VALUES (5,4);

INSERT INTO MANAGER_TRUPA(ID_TRUPA, ID_ANGAJAT)
VALUES (7,5);

--administrator contracte
INSERT INTO ADMINISTRATOR_CONTRACTE(ID_ANGAJAT, SPECIALITATE)
VALUES (6,'Vânzări');

INSERT INTO ADMINISTRATOR_CONTRACTE(ID_ANGAJAT, SPECIALITATE)
VALUES (7,'Angajări');

INSERT INTO ADMINISTRATOR_CONTRACTE(ID_ANGAJAT, SPECIALITATE)
VALUES (8,'Parteneriate');

INSERT INTO ADMINISTRATOR_CONTRACTE(ID_ANGAJAT, SPECIALITATE)
VALUES (9,'Publicări');

INSERT INTO ADMINISTRATOR_CONTRACTE(ID_ANGAJAT)
VALUES (10);

--cercetator marketing

INSERT INTO  CERCETATOR_MARKETING(ID_ANGAJAT, CATEGORIE)
VALUES (11,'Social Media');

INSERT INTO  CERCETATOR_MARKETING(ID_ANGAJAT, CATEGORIE)
VALUES (12,'Generational');

INSERT INTO  CERCETATOR_MARKETING(ID_ANGAJAT)
VALUES (13);

INSERT INTO  CERCETATOR_MARKETING(ID_ANGAJAT, CATEGORIE)
VALUES (14,'Inter-Platformer');

INSERT INTO  CERCETATOR_MARKETING(ID_ANGAJAT, CATEGORIE)
VALUES (15,'Surveyor');

--inginer audio

INSERT INTO INGINER_AUDIO(ID_ANGAJAT, SPECIALITATE_GEN)
VALUES (16,'Hip Hop');

INSERT INTO INGINER_AUDIO(ID_ANGAJAT, SPECIALITATE_GEN)
VALUES (17,'Punk Rock');

INSERT INTO INGINER_AUDIO(ID_ANGAJAT, SPECIALITATE_GEN)
VALUES (18,'Alternative Rock');

INSERT INTO INGINER_AUDIO(ID_ANGAJAT, SPECIALITATE_GEN)
VALUES (19,'Funk Rock');

INSERT INTO INGINER_AUDIO(ID_ANGAJAT, SPECIALITATE_GEN)
VALUES (20,'Progressive Rock');



--date adaugate ulterior pentru exercitii

--Date inserate pentru exercitiul 8
--ca sa exemplific si exceptia de NO_CONTRACT, o sa inserez o noua casa de discuri fara contracte
INSERT INTO CASA_DISCURI (NUME, WEBSITE, AN_INFIINTARE)
VALUES ('Angel Records', 'fallenangel.com', 2014);--6
--Date inserate pentru exercitiul 9
INSERT INTO CASA_DISCURI (NUME, WEBSITE, AN_INFIINTARE)
VALUES ('RedhoodRecords', 'https://www.rhrecords.com/', 2007);--7

INSERT INTO CASA_DISCURI (NUME, WEBSITE, AN_INFIINTARE)
VALUES ('Shadow Records', 'https://www.possesme.com/', 2012);--8

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Will Wood','Avant-pop', DATE'2020-04-01'); --8

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('The Tapeworms','Chaotic Jazz', DATE'2015-11-06'); --9

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Ashnikko','Hyperpop', DATE'2012-10-31'); --10


--WW
INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(8,7,'The Normal Album','EP', DATE '2020-06-10');--9

--TT
INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(9,7,'Everything is a lot','EP', DATE '2015-05-20');--10

--ASHN
INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(10,8,'WEEDKILLER','Album', DATE '2023-08-25');--11

--WW
INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Suburbia Overture',6.16);--25

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Laplace''s Angel',4.01);--26

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('2econd-2ight-2eer',3.26);--27

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(9,25);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(9,26);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(9,27);


--TT

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Front Street',5.15);--28

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Chemical Overreaction/Everything is a lot',8.28);--29


INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(10,28);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(10,29);

--ASHN

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Cheerleader',2.40);--30

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Chokehold Cherry Python',2.39);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Worms',3.26);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Want It All',2.39);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Dying Star',4.15);--43


INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(11,30);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(11,31);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(11,32);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(11,33);
INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(11,34);

 
--date introduse pentru exerictiul 13
INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('Montaigne','NuPop',DATE '2012-04-20'); --11

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Montaigne Cerro', DATE '1995-08-14', 'f'); --16

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (16,11,'Vocalist');

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (11,15);

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (3, 'Pamela Isley', 8700, 'Financiar', DATE '2001-02-28');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(6,4,'Red Flags','Single', DATE '2023-03-12');

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(6,4,'Red Flags','EP', DATE '2024-03-12');

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('The No Pants Dance',4.31); --35

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('The No Pants Dance',4.28); --36

INSERT INTO TRUPA (NUME, GEN, DATA_INFIINTARE)
VALUES ('NSP','Comedy Rock',DATE '2010-04-20'); --12

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,35);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (5,36);

INSERT INTO TRUPA_CANTEC(ID_TRUPA, ID_CANTEC)
VALUES (12,36);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('Red Flags',4.12);

INSERT INTO CANTEC(NUME, LUNGIME)
VALUES ('H.S.',4.20);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(12,37); 

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(13,37);

INSERT INTO CANTEC_ALBUM(ID_ALBUM, ID_CANTEC) 
VALUES(13,38);

INSERT INTO ALBUM(ID_TRUPA, ID_CASA_DISCURI, NUME, TIP, DATA_LANSARE)
VALUES(3,2,'Heartbreak in Stereo','Album', DATE '2001-11-26');

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Dan Avidan', DATE '1979-03-14', 'm');--17

INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Brian Wecht', DATE '1975-04-22', 'm');--18

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (18,12,'Claviatura');

INSERT INTO MEMBRU_TRUPA(ID_MUZICIAN, ID_TRUPA, POZITIE)
VALUES (17,12,'Vocalist');

--date au fost introduce pentru a exemplifica exceptiile si cazurile tratate

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--6 
/
CREATE OR REPLACE PROCEDURE EX6 ( V_CD CASA_DISCURI.ID_CASA_DISCURI%TYPE) AS --id casa discuri pt care afisam rezultatele
    
    TYPE VECTOR_ALBUME IS VARRAY(100) OF ALBUM%ROWTYPE;
    V_ALBUME VECTOR_ALBUME := VECTOR_ALBUME();--aici pun albumele - vector
    
    TYPE DETALII_MUZICIAN IS RECORD (
        NUME MUZICIAN.NUME%TYPE,
        VARSTA NUMBER(3),
        POZITIE MEMBRU_TRUPA.POZITIE%TYPE
    );
    
    TYPE TABLOU_MEMBRII IS TABLE OF DETALII_MUZICIAN;
    T_MEMBRII TABLOU_MEMBRII := TABLOU_MEMBRII(); --TABLOU IMBRICAT CU MUZICIENII
    

    TYPE TABLOU_INSTRUMENTE IS TABLE OF INSTRUMENT.NUME%TYPE INDEX BY INSTRUMENT.UTILIZATOR%TYPE;
    T_INSTRUMENTE TABLOU_INSTRUMENTE; --TABLOU CU INSTRUMENTE INDEXATE PER POZITIE
    
    VCOUNT NUMBER(3) := 1;
    VTRUPA TRUPA.ID_TRUPA%TYPE;
    INDX INSTRUMENT.UTILIZATOR%TYPE;
    
BEGIN
   
    --pun albumele unei case de discuri specifice intr-un vector, in ordinea datii lansarii
    FOR I IN (SELECT * FROM ALBUM WHERE ID_CASA_DISCURI = V_CD ORDER BY DATA_LANSARE DESC) LOOP
        V_ALBUME.EXTEND;
        V_ALBUME(VCOUNT) := I;
        VCOUNT := VCOUNT + 1;
    END LOOP;
    VCOUNT := VCOUNT - 1;
    
    DBMS_OUTPUT.PUT_LINE('Casa de discuri are ' || V_ALBUME.COUNT || ' albume');

    --pentru cel mai vechi album, gasesc id-ul trupei
    SELECT ID_TRUPA
    INTO VTRUPA
    FROM ALBUM 
    WHERE ID_ALBUM = V_ALBUME(VCOUNT).ID_ALBUM;
    --cum e ordonat, cea mai veche e mereu ultima (ca sa folosesc last mai jos si sa aiba sens)

    --CEL mai vechi album, 
    DBMS_OUTPUT.PUT_LINE('Cel mai vechi album: ' || V_ALBUME(V_ALBUME.LAST).NUME );
    
    DBMS_OUTPUT.NEW_LINE;
    --tablou imbricat cu membrii
    SELECT M.NUME, FLOOR(MONTHS_BETWEEN(SYSDATE,M.ZI_NASTERE)/12) AS VARSTA, 
            MT.POZITIE
    BULK COLLECT INTO T_MEMBRII
    FROM TRUPA T
    JOIN MEMBRU_TRUPA MT ON T.ID_TRUPA = MT.ID_TRUPA
    JOIN MUZICIAN M ON M.ID_MUZICIAN = MT.ID_MUZICIAN
    WHERE T.ID_TRUPA = VTRUPA;
    
    --afisarea membriilor trupei
    FOR I IN T_MEMBRII.FIRST..T_MEMBRII.LAST LOOP
        DBMS_OUTPUT.PUT_LINE(T_MEMBRII(I).NUME);
    END LOOP;
    
    --tabel indexat cu UTILIZATORUL cu instrumentele TRUPEI
    FOR I IN (SELECT NUME, UTILIZATOR FROM INSTRUMENT WHERE ID_TRUPA = VTRUPA) LOOP
        T_INSTRUMENTE(I.UTILIZATOR) := I.NUME;
    END LOOP;
    --se suprascriu cele care repeta utilizatorul - ramane 1
    
    DBMS_OUTPUT.NEW_LINE;
    --cate un instrument din fiecare pozitie care apare in trupa
    --inafara de vocalist (nu are instrumente)
    FOR I IN (SELECT UNIQUE POZITIE FROM MEMBRU_TRUPA WHERE ID_TRUPA = VTRUPA AND POZITIE != 'Vocalist') LOOP
        DBMS_OUTPUT.PUT_LINE(I.POZITIE || ': ' || T_INSTRUMENTE(I.POZITIE) );
        T_INSTRUMENTE.DELETE(I.POZITIE);
    END LOOP;

    --daca mai sunt instrumente
    IF T_INSTRUMENTE.COUNT > 0 THEN
        DBMS_OUTPUT.NEW_LINE;
        DBMS_OUTPUT.PUT_LINE('Exista instrumente pentru pozitii neocupate: ');
        --iteram prin ele pana nu mai am index
        INDX := T_INSTRUMENTE.FIRST;
        WHILE INDX IS NOT NULL LOOP
            DBMS_OUTPUT.PUT_LINE(INDX || ': ' || T_INSTRUMENTE(INDX));
            INDX := T_INSTRUMENTE.NEXT(INDX);
        END LOOP;
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20000,'nu au fost gasite date');
    WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20001,'au fost returnate prea multe linii');
    WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20002,'alta eroare');
    
END;
/

----------------------
/
BEGIN
    EX6(5);
END;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--7
/
--pentru fiecare trupa, luate in ordine alfabetica, sa se afiseze numele si numarul de membrii
--sa se afiseze top 3 cantece (sau cate exista, daca are mai putin de 3) (in ordine de la cele mai lungi cantece)
CREATE OR REPLACE PROCEDURE EX7  AS 
    
    CURSOR TRUPE IS --cursor explicit
        SELECT ID_TRUPA, NUME, 
            (SELECT COUNT(*) FROM MEMBRU_TRUPA MT WHERE MT.ID_TRUPA = T.ID_TRUPA GROUP BY T.ID_TRUPA) AS NR_MEMBRII
        FROM TRUPA T;
        
    CURSOR TOP_CANTECE(V_ID TRUPA.ID_TRUPA%TYPE) IS --cursor explicit, parametrizat
        SELECT * FROM(
            SELECT NUME
            FROM CANTEC
            JOIN TRUPA_CANTEC ON CANTEC.ID_CANTEC = TRUPA_CANTEC.ID_CANTEC
            WHERE V_ID = ID_TRUPA
            ORDER BY LUNGIME DESC)
        WHERE ROWNUM <= 3;
        
    NUME_CANTEC CANTEC.NUME%TYPE; --ca sa fac fetch 
    
BEGIN
   
   FOR VTRUPA IN TRUPE LOOP --parcurgere cu for
        DBMS_OUTPUT.PUT_LINE(VTRUPA.NUME);
        IF VTRUPA.NR_MEMBRII > 1 THEN
            DBMS_OUTPUT.PUT_LINE('Trupa are ' || VTRUPA.NR_MEMBRII ||' membrii');
        ELSIF VTRUPA.NR_MEMBRII = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Trupa are un membru');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Trupa nu are muzicieni inregistrati');
        END IF;
        --parcurgere cu open, close si fetch
        OPEN TOP_CANTECE(VTRUPA.ID_TRUPA);
        LOOP
            FETCH TOP_CANTECE INTO NUME_CANTEC;
            EXIT WHEN TOP_CANTECE%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE(TOP_CANTECE%ROWCOUNT || '. ' || NUME_CANTEC);
        END LOOP;
        CLOSE TOP_CANTECE;
        DBMS_OUTPUT.NEW_LINE;
   END LOOP;

    
EXCEPTION
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20000,'nu au fost gasite date');
    WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20001,'au fost returnate prea multe linii');
    WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20002,'alta eroare');
    
END;
/
BEGIN
    EX7;
END;


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--8
/
CREATE OR REPLACE FUNCTION EX8 (V_ID CASA_DISCURI.ID_CASA_DISCURI%TYPE DEFAULT 1) --se da id-ul casei de discuri
RETURN NUMBER IS

    NR_MUZICIENI NUMBER(3);
    
    TYPE ZILE_SAPTAMANA IS TABLE OF VARCHAR2(10) INDEX BY PLS_INTEGER;
    ZILE_SAPT ZILE_SAPTAMANA := ZILE_SAPTAMANA();
    
    ZI VARCHAR2(10); --aici o sa punem ziua gasita
    VCOUNT NUMBER(3) := 0;
    NR_EXPIRAT NUMBER(3) := 0;
    NR_CONTRACTE NUMBER(3) := 0;
    VMAXIM NUMBER(3) := 0;
    
    CURSOR CONTRACTE (ZI_SAPT PLS_INTEGER, V_ID CASA_DISCURI.ID_CASA_DISCURI%TYPE) IS
        SELECT     --cursor pt contractele ssemnate in acea zi
            CASE WHEN MONTHS_BETWEEN(DATA_EXPIRARE,SYSDATE) < 0 THEN 1 ELSE 0 END AS EXPIRAT --1 INSEAMNA EXPIRAT
        FROM CONTRACT
        WHERE ID_CASA_DISCURI = V_ID
        AND TO_CHAR(DATA_SEMNARE,'D') = ZI_SAPT;
    
    NO_CONTRACT EXCEPTION;
    NO_CD EXCEPTION;
    
BEGIN
    --zilele saptamanii 
    ZILE_SAPT (1) := 'LUNI'; ZILE_SAPT (2) := 'MARTI'; ZILE_SAPT (3) := 'MIERCURI'; ZILE_SAPT (4) := 'JOI'; 
    ZILE_SAPT (5) := 'VINERI'; ZILE_SAPT (6) := 'SAMBATA'; ZILE_SAPT (7) := 'DUMINICA';
    
    --verific daca exista casa de discuri data
    SELECT COUNT(*)
    INTO VCOUNT
    FROM CASA_DISCURI
    WHERE ID_CASA_DISCURI = V_ID;
    
    IF VCOUNT = 0 THEN
        RAISE NO_CD;
    END IF;
    
    --verific daca are contracte
    SELECT COUNT(*)
    INTO VCOUNT
    FROM CONTRACT
    WHERE ID_CASA_DISCURI = V_ID;
    
    IF VCOUNT = 0 THEN
        RAISE NO_CONTRACT;
    END IF;    
    
    --CAUT ziua cu nr maxim de contracte semnate
    FOR I IN 1..7 LOOP --iterez prin fiecare zi 
        VCOUNT := 0; 
        FOR CONTR IN CONTRACTE(I, V_ID) LOOP 
            VCOUNT := VCOUNT + 1; 
            NR_CONTRACTE := NR_CONTRACTE + 1; --AICI LE NUMAR PE TOATE
            NR_EXPIRAT := NR_EXPIRAT + CONTR.EXPIRAT; --AICI NR CELE EXPIRATE
        END LOOP; --ptr fiecare contract semnat in ziua aia, adun 1
        IF VCOUNT > VMAXIM THEN 
            VMAXIM := VCOUNT; 
            ZI := I; 
        END IF;
    END LOOP; 
    --OK! acum am numarul zilei in variabila ZI
    DBMS_OUTPUT.PUT_LINE('Cele mai multe contracte au fost semnate intr-o zi de ' || ZILE_SAPT(ZI));
    --afisati mesaj corespunzator daca toate contractele sunt expirate
    IF NR_EXPIRAT = NR_CONTRACTE THEN
         DBMS_OUTPUT.PUT_LINE('Toate contractele casei de discuri sunt expirate!');
    END IF;
    
    -----------
    --returneaza numarul de muzicieni care a ziua de nastere in aceasi zi a saptamanii
    --aici o sa folosesc 3 tabele intr-o comanda sql
    SELECT COUNT(*) 
    INTO NR_MUZICIENI
    FROM CASA_DISCURI CD
    JOIN CONTRACT C ON C.ID_CASA_DISCURI = CD.ID_CASA_DISCURI
    JOIN MUZICIAN M ON M.ID_MUZICIAN = C.ID_MUZICIAN
    WHERE CD.ID_CASA_DISCURI = V_ID
          AND TO_CHAR(M.ZI_NASTERE, 'D') = ZI;
    
    RETURN NR_MUZICIENI;

EXCEPTION
    WHEN NO_CD THEN RAISE_APPLICATION_ERROR (-20003,'nu a fost gasita casa de discuri cu acel id');
    WHEN NO_CONTRACT THEN RAISE_APPLICATION_ERROR (-20004,'nu au fost gasite contracte la acea casa de discuri');    
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20000,'nu au fost gasite date');
    WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20001,'au fost returnate prea multe linii');
    WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20002,'alta eroare');
        
END EX8;
/

----------------------
/
DECLARE
    NR_MUZICIENI NUMBER(3);
BEGIN
    NR_MUZICIENI := EX8(4);
    IF NR_MUZICIENI = 0 THEN 
        DBMS_OUTPUT.PUT_LINE('Nu exista muzicieni de la aceasta casa de discuri care indeplineasca conditiile');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Exista '||NR_MUZICIENI|| ' muzicieni cu ziua de nastere in aceasi zi');
    END IF;
END;
/

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--9
/
CREATE OR REPLACE PROCEDURE EX9 
    (V_ID IN CASA_DISCURI.ID_CASA_DISCURI%TYPE, --ID CASA DE DISCURI CARE VA FI DAT
     NUME_TRUPA OUT TRUPA.NUME%TYPE,
      NUME_CANTEC OUT CANTEC.NUME%TYPE) AS 

    --cursor pentru toate trupele care au contribuit la un album care sa fie diferite de trupa care l-a lansat
    --ca sa folosesc într-o singură comandă SQL 5 dintre tabelele create
    --voi face cu numele albumului, in loc de id_album
    CURSOR FEAT_TRUPE (NUME_ALBUM ALBUM.NUME%TYPE, NUME_TRUPA TRUPA.NUME%TYPE) IS
        SELECT unique T.NUME
        FROM TRUPA T
        JOIN TRUPA_CANTEC TC ON TC.ID_TRUPA = T.ID_TRUPA
        JOIN CANTEC C ON TC.ID_CANTEC = C.ID_CANTEC
        JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
        JOIN ALBUM A ON CA.ID_ALBUM = A.ID_ALBUM
        WHERE A.NUME = NUME_ALBUM
        AND T.NUME != NUME_TRUPA;
    
    VCOUNT NUMBER(2);
    VALBUM ALBUM.ID_ALBUM%TYPE;
    NUME_ALBUM ALBUM.NUME%TYPE;
    MLUNGIME CANTEC.LUNGIME%TYPE;
      
    -- exceptii
    NO_CASA_DISCURI EXCEPTION; --cand nu exista cd
    NO_ALBUMS EXCEPTION; --cand exista cd si nu are albume
    TOO_MANY_ALBUMS EXCEPTION; --CAND SUNT MAI MULTE ALBUME DE LUNGIME MAXIMA
    TOO_MANY_CANTECE EXCEPTION; --CAND SUNT MAI MULTE CANTECE DE LUNGIME MINIMA
    
BEGIN
   --daca exista cd
   SELECT COUNT(*) 
   INTO VCOUNT
   FROM CASA_DISCURI
   WHERE V_ID = ID_CASA_DISCURI;
   
   IF VCOUNT < 1 THEN
        RAISE NO_CASA_DISCURI;
    END IF;
    
   
   --daca are albume
   SELECT COUNT(*) 
   INTO VCOUNT
   FROM ALBUM
   WHERE V_ID = ID_CASA_DISCURI;
   
   IF VCOUNT < 1 THEN
        RAISE NO_ALBUMS;
    END IF;
    
    --se ridica eroare daca exista 2+ albume de exact aceasi lungime maxima
    --la acea casa de discuri
    SELECT MAX(SUM(LUNGIME))
    INTO MLUNGIME
    FROM CANTEC C
    JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
    JOIN ALBUM A ON A.ID_ALBUM = CA.ID_ALBUM
    WHERE A.ID_CASA_DISCURI = V_ID
    GROUP BY CA.ID_ALBUM;
    

    SELECT COUNT(*)
    INTO VCOUNT
    FROM ALBUM A
    WHERE V_ID = ID_CASA_DISCURI
    AND (SELECT SUM(LUNGIME)
    FROM CANTEC C
    JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
    WHERE CA.ID_ALBUM = A.ID_ALBUM
    GROUP BY ID_ALBUM) = MLUNGIME;
    

    IF VCOUNT > 1 THEN 
        RAISE TOO_MANY_ALBUMS;
    END IF;

    
    --id cel mai lung album
    SELECT ID_album, NUME
    INTO VALBUM, NUME_ALBUM
    FROM ALBUM A
    WHERE V_ID = ID_CASA_DISCURI
    AND (SELECT SUM(LUNGIME)
    FROM CANTEC C
    JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
    WHERE CA.ID_ALBUM = A.ID_ALBUM
    GROUP BY ID_ALBUM) = MLUNGIME;
    
   
   --trupa celui mai lung album
   SELECT T.NUME
   INTO NUME_TRUPA
   FROM TRUPA T
    JOIN ALBUM A ON A.ID_TRUPA = T.ID_TRUPA
    WHERE ID_ALBUM = VALBUM;
    
    
    --se ridica eroare daca exista 2+ cantece de cea mai scurta lungime
     SELECT MIN(LUNGIME)
    INTO MLUNGIME --LUNGIMEA minima de cantec
    FROM CANTEC C
    JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
    WHERE ID_ALBUM = VALBUM;
    

    
   SELECT COUNT(*)
    INTO VCOUNT
    FROM CANTEC C
   JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
   WHERE ID_ALBUM = VALBUM
   AND LUNGIME = MLUNGIME;
   
    IF VCOUNT > 1 THEN 
        RAISE TOO_MANY_CANTECE;
    END IF;
    
    
    --eu si vcount suntem bffs <3 i love vcount
   
   --cel mai scurt cantec
   SELECT NUME
   INTO NUME_CANTEC
   FROM CANTEC C
   JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
   WHERE ID_ALBUM = VALBUM
   AND LUNGIME = MLUNGIME;

   
   --se afiseaza in procedura numele albumului 
    DBMS_OUTPUT.PUT_LINE('Cel mai lung album: ');
    DBMS_OUTPUT.PUT_LINE(NUME_ALBUM);
    DBMS_OUTPUT.PUT_LINE('-------------------');
    
    --daca mai exista alti muzicieni care au
    --contribuit la cantecele de pe el inafara de trupa care l-a lansat = afisam
    FOR VTRUPA IN FEAT_TRUPE(NUME_ALBUM,NUME_TRUPA) LOOP
        DBMS_OUTPUT.PUT_LINE('feat: ' || VTRUPA.NUME);
        DBMS_OUTPUT.PUT_LINE('-------');
    END LOOP;
    
   
    
EXCEPTION
    WHEN NO_CASA_DISCURI THEN RAISE_APPLICATION_ERROR (-20003,'nu a fost gasita casa de discuri cu acel id');
    WHEN NO_ALBUMS THEN RAISE_APPLICATION_ERROR (-20004,'nu au fost gasite albume la acea casa de discuri');  
    WHEN TOO_MANY_ALBUMS THEN RAISE_APPLICATION_ERROR (-20005,'au fost gasite prea multe albume cu lungime maxima');    
    WHEN TOO_MANY_CANTECE THEN RAISE_APPLICATION_ERROR (-20006,'au fost gasite prea multe cantece cu lungime minima');    
    
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20000,'nu au fost gasite date');
    WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20001,'au fost returnate prea multe linii');
    WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20002,'alta eroare');
    
END;
/

----------------------
/
DECLARE 
     NUME_TRUPA TRUPA.NUME%TYPE;
      NUME_CANTEC CANTEC.NUME%TYPE;
BEGIN
    EX9(8,NUME_TRUPA,NUME_CANTEC);
    DBMS_OUTPUT.PUT_LINE('Trupa care a lansat albumul: '|| NUME_TRUPA);
    DBMS_OUTPUT.PUT_LINE('-------------------');
    DBMS_OUTPUT.PUT_LINE('Cel mai scurt cantec de pe album: '|| NUME_CANTEC);
    DBMS_OUTPUT.new_line;

END;

/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--10
--trigger declansat la nivel de comanda
-- sa nu poti inregistra un angajat nou daca
--nu a trecut o saptaman de la ultima angajare
--nu poti sa dai update daca este weekend
--si nu poti sa il stergi decat daca e un numar par de angajati
--la nivelul bazei mele de date, nu sunt cele mai logice triggere,
--insa am incercat sa le fac interesante
/
CREATE OR REPLACE TRIGGER EX10
    BEFORE INSERT OR UPDATE OR DELETE ON ANGAJAT
DECLARE
    VCOUNT NUMBER(4);
BEGIN
    SELECT SYSDATE - MAX(DATA_ANGAJARE)--cate zile de la ultima angajare
    INTO VCOUNT
    FROM ANGAJAT;

    IF INSERTING THEN
        IF  (VCOUNT < 7) THEN
            RAISE_APPLICATION_ERROR(-20007,'Nu a trecut inca o saptamana de la ultima angajare');
        END IF;
    END IF;

    IF UPDATING THEN
        IF(TO_CHAR(SYSDATE,'D') = 6) OR (TO_CHAR(SYSDATE,'D') = 7) THEN
            RAISE_APPLICATION_ERROR(-20008,'Nu puteti face update la angajati in timpul weekend-ului');
        END IF;
    END IF;

    SELECT COUNT(*)
    INTO VCOUNT
    FROM ANGAJAT;

    IF DELETING THEN
        IF (MOD(VCOUNT,2) = 0) THEN
            RAISE_APPLICATION_ERROR(-20009,'Nu puteti sterge un angajat daca este numar par de angajati');
        END IF;
    END IF;

END;
/

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (7, 'Jack Napier', 7777, 'Publicitar', DATE '2025-01-04'); --cineva angajat acum mai putin de o saptamana

INSERT INTO ANGAJAT (ID_CASA_DISCURI, NUME, SALARIU, DEPARTAMENT, DATA_ANGAJARE)
VALUES (6, 'Alfred Pennyworth', 10500, 'Managment', DATE '1989-02-28'); -- sa nu il putem inregistra pe el, 
    --indiferent de data lui de angajare haha

UPDATE ANGAJAT
SET SALARIU = '10000'
WHERE ID_ANGAJAT = 25; --azi, cand pun acest exercitiu in proiect, este sambata!

DELETE FROM ANGAJAT
WHERE ID_ANGAJAT = 22; --momentan sunt 28 de angajati in baza de date, deci ar trebui sa se declanseze
                        --(am drop-at trigger-ul ca sa il adaug pe alfred ca sa am numar par)

select * from angajat;

/
DROP TRIGGER EX10;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--11
--trigger declansat la nivel de linie
--cand se face update la un muzician se modifica orice contract
--activ, i se mai adauga 30 de zile la acesta
--nu poti sa bagi un muzician care are varsta mai mica de 16 ani
/
CREATE OR REPLACE PROCEDURE EXTINDERE_CONTRACTE
    (V_ID ANGAJAT.ID_ANGAJAT%TYPE) AS
    OK NUMBER(1);
BEGIN
    UPDATE CONTRACT
    SET DATA_EXPIRARE = DATA_EXPIRARE + 30
    WHERE ID_MUZICIAN = V_ID
    AND SYSDATE - DATA_EXPIRARE < 0;
END;
/

CREATE OR REPLACE TRIGGER EX11
    BEFORE INSERT OR UPDATE ON MUZICIAN
    FOR EACH ROW
BEGIN
   IF UPDATING THEN
        EXTINDERE_CONTRACTE(:old.id_muzician);
    END IF;
    
    IF INSERTING THEN
        IF ( MONTHS_BETWEEN(SYSDATE,:NEW.ZI_NASTERE)/12 < 16) THEN
            RAISE_APPLICATION_ERROR (-20016, 'Nu puteti inregistra un muzician sub varsta de 16 ani');
        END IF;
    END IF;
END;
/

--o sa inserez un muzician nou cu 2 contracte activ si unul inactiv
INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Joker',DATE '1969-08-01', 'm'); --17

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (17,7,DATE'2023-08-31',DATE'2026-08-31');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (17,7,DATE'2023-08-31',DATE'2027-02-07');

INSERT INTO CONTRACT(ID_MUZICIAN, ID_CASA_DISCURI, DATA_SEMNARE, DATA_EXPIRARE)
VALUES (17,7,DATE'2023-08-31',DATE'2024-02-07');

SELECT * FROM CONTRACT WHERE ID_MUZICIAN = 17;

UPDATE MUZICIAN
SET NUME = 'The Joker'
WHERE ID_MUZICIAN = 17;

SELECT * FROM CONTRACT WHERE ID_MUZICIAN = 17;


--insearea unui muzician sub varsta de 16 ani
INSERT INTO MUZICIAN (NUME, ZI_NASTERE, GEN)
VALUES ('Nightwing',DATE '2010-10-10', 'm');

    
DROP TRIGGER EX11;

/

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--12
--cand se efectueaza orice comanda LDD asupra schemei
--se retine in tabelul ARHIVA 
--data, numele utilizatorului, actiunea facuta, tipul si numele tabelului
/
CREATE TABLE ARHIVA
(   DATAE TIMESTAMP(3),
    NUME_USER VARCHAR2(50),
    EVENT VARCHAR2(50),
    TIP_OBIECT VARCHAR2(50),
    NUME_OBIECT VARCHAR2(50));

/
CREATE OR REPLACE TRIGGER EX12
    AFTER CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
    INSERT INTO ARHIVA
    VALUES(SYSTIMESTAMP, SYS.LOGIN_USER, SYS.SYSEVENT, 
        SYS.DICTIONARY_OBJ_TYPE, SYS.DICTIONARY_OBJ_NAME);
END;
/
CREATE TABLE CD (NUME VARCHAR2(40), ID_ALBUM INT);
ALTER TABLE CD
ADD CONSTRAINT FK_ALBUM FOREIGN KEY (ID_ALBUM)
REFERENCES ALBUM (ID_ALBUM);
DROP TABLE CD;

SELECT * FROM ARHIVA;
DROP TABLE ARHIVA;

DROP TRIGGER EX12;

/


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--13
--pachet
--tipuri de date complexe = vector in vector / record

--definiti un pachet care sa faca disponibil public proceduri care returneaza detalii despre
--casa de discuri, albumul sau cantecul 
--al carui id sau nume este dat

CREATE OR REPLACE PACKAGE EX13 AS
--DECLARATII PUBLICE
--2 proceduri pentru fiecare: casa discuri, album si cantec
--una cu numele, una cu id-ul
--la album si cantec, exceptii daca exista mai multe cu acelasi nume (daca se apeleaza prin nume)
    
    PROCEDURE ABOUT_CASA_DISCURI (CD_ID IN CASA_DISCURI.ID_CASA_DISCURI%TYPE);
    PROCEDURE ABOUT_CASA_DISCURI (CD_NUME IN CASA_DISCURI.NUME%TYPE);
    
    PROCEDURE ABOUT_ALBUM (VALBUM_ID IN ALBUM.ID_ALBUM%TYPE);
    PROCEDURE ABOUT_ALBUM (VALBUM_NUME IN ALBUM.NUME%TYPE);
    
    PROCEDURE ABOUT_CANTEC (VCANTEC_ID IN CANTEC.ID_CANTEC%TYPE);
    PROCEDURE ABOUT_CANTEC (VCANTEC_NUME IN CANTEC.NUME%TYPE);
    
    PROCEDURE GASESTE_ALBUM (VALBUM_NUME IN ALBUM.NUME%TYPE);
    PROCEDURE GASESTE_CANTEC (VCANTEC_NUME IN CANTEC.NUME%TYPE);

END EX13;
/
CREATE OR REPLACE PACKAGE BODY EX13 IS
--DECLARATII PRIVATE
    TYPE T_ID_TRUPE_CANTEC IS TABLE OF TRUPA.ID_TRUPA%TYPE INDEX BY PLS_INTEGER;
        
--FUNCTIE CARE RETURNEAZA ID-URILE TUTUROR TRUPELOR CARE AU LUCRAT LA UN CANTEC -PT ALBUM
    
    FUNCTION TRUPE_CANTEC (VID_CANTEC CANTEC.ID_CANTEC%TYPE)
        RETURN T_ID_TRUPE_CANTEC IS
        LISTA_TRUPE T_ID_TRUPE_CANTEC;
    BEGIN
        SELECT ID_TRUPA
        BULK COLLECT INTO LISTA_TRUPE
        FROM TRUPA_CANTEC
        WHERE ID_CANTEC = VID_CANTEC;
        RETURN LISTA_TRUPE;
    END TRUPE_CANTEC;
    
--procedurile dupa nume gasesc id-ul sau ridica eroare la album si cantec daca exista mai multe cu acelasi nume
--si apeleaza procedurile dupa id
    
--ABOUT CASA DISCURI
    --NUME, ADRESA, WEBSITE, AN INFIINTARE DACA EXISTA
    --NUMARUL DE DEPARTMENTE, LISTA CU DEPARTAMENTELE
    --SUB FIECARE NUME DE DEPARTAMEN, salariu maxim + LISTA CU TOTI ANGAJATII SI SALARIU 
    --} TABEL(DEPARTAMENT, SALARIUMAX, TABEL DE RECORDS (ANGAJATI + SALARIU))
    
    --dupa id
    PROCEDURE ABOUT_CASA_DISCURI (CD_ID IN CASA_DISCURI.ID_CASA_DISCURI%TYPE) IS
    --declarari
        NUME_CD CASA_DISCURI.NUME%TYPE;
        ADRESA_CD CASA_DISCURI.ADRESA%TYPE;
        WEBSITE_CD CASA_DISCURI.WEBSITE%TYPE;
        AN_CD CASA_DISCURI.AN_INFIINTARE%TYPE;
        I NUMBER(2);
        VCOUNT NUMBER(1);
        NO_CD EXCEPTION;
        
        TYPE ANGAJAT_DEPT IS RECORD(
            NUME ANGAJAT.NUME%TYPE,
            SALARIU ANGAJAT.NUME%TYPE); --DETALII ANGAJAT
            
        TYPE T_ANGAJAT_DEPT IS TABLE OF ANGAJAT_DEPT INDEX BY PLS_INTEGER;
        
        TYPE R_DETALII_DEPT IS RECORD(
            NUME ANGAJAT.DEPARTAMENT%TYPE,
            SALARIU_MAX ANGAJAT.SALARIU%TYPE,
            DETALII_ANGAJATI T_ANGAJAT_DEPT);--LISTA ANGAJATI PER DEPARTAMENT
            
        TYPE T_DETALII_DEPT IS TABLE OF R_DETALII_DEPT INDEX BY PLS_INTEGER; 
        DETALII_DEPT T_DETALII_DEPT := T_DETALII_DEPT(); --LISTA DEPARTENTE + DETALII PER CD
        
        CURSOR DEPARTAMENTE(V_ID CASA_DISCURI.ID_CASA_DISCURI%TYPE) IS 
            SELECT UNIQUE DEPARTAMENT
            FROM ANGAJAT
            WHERE V_ID = ID_CASA_DISCURI;
            
        FUNCTION MAXSALARY(VCD CASA_DISCURI.ID_CASA_DISCURI%TYPE, VDEPT ANGAJAT.DEPARTAMENT%TYPE) 
            RETURN ANGAJAT.SALARIU%TYPE IS
            VMAX ANGAJAT.SALARIU%TYPE; --functie pentru salariul maxim al unui departament al unei cd
        BEGIN
            SELECT MAX(SALARIU)
            INTO VMAX
            FROM ANGAJAT
            WHERE DEPARTAMENT = VDEPT
            AND ID_CASA_DISCURI = VCD;
            RETURN VMAX;
        END;
        
    BEGIN
        --DACA EXISTA CD
        SELECT COUNT(ID_CASA_DISCURI)
        INTO VCOUNT
        FROM CASA_DISCURI
        WHERE ID_CASA_DISCURI = CD_ID;
        
        
        IF VCOUNT = 0 THEN
            RAISE NO_CD;
        END IF;
    
        --CAUT NUME, SI RESTUL CHESTIILOR DACA EXISTA
        SELECT NUME, ADRESA, WEBSITE, AN_INFIINTARE
        INTO NUME_CD, ADRESA_CD, WEBSITE_CD, AN_CD
        FROM CASA_DISCURI
        WHERE ID_CASA_DISCURI = CD_ID;
        
        --afisez detaliile casei de discuri
         DBMS_OUTPUT.PUT_LINE(NUME_CD);
         IF AN_CD IS NOT NULL THEN 
            DBMS_OUTPUT.PUT_LINE('An infiintare: ' || AN_CD);
        END IF;
         IF ADRESA_CD IS NOT NULL THEN 
            DBMS_OUTPUT.PUT_LINE('Adresa: '||ADRESA_CD);
        END IF;
        IF WEBSITE_CD IS NOT NULL THEN 
            DBMS_OUTPUT.PUT_LINE('Website: ' || WEBSITE_CD);
        END IF;
        DBMS_OUTPUT.PUT_LINE('------------------');
        
    
        --TREC PRIN DEPARTMENTE
        --POPULEZ PENTRU FIECARE TABELUL DE ANGAJATI
        I := 0;
        FOR VDEPT IN DEPARTAMENTE(CD_ID) LOOP
            I := I + 1;
            DETALII_DEPT(I).NUME := VDEPT.DEPARTAMENT;
            DETALII_DEPT(I).SALARIU_MAX := MAXSALARY(CD_ID, VDEPT.DEPARTAMENT);
            
            SELECT NUME, SALARIU
            BULK COLLECT INTO DETALII_DEPT(I).DETALII_ANGAJATI
            FROM ANGAJAT
            WHERE DEPARTAMENT = VDEPT.DEPARTAMENT
            AND ID_CASA_DISCURI = CD_ID;
        END LOOP;
        
        --afisam departamentele si angajatii, daca exista
        IF DETALII_DEPT.COUNT > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Nr. departamente: ' || DETALII_DEPT.COUNT);
            FOR J IN DETALII_DEPT.FIRST..DETALII_DEPT.LAST LOOP
                DBMS_OUTPUT.PUT_LINE('----------');
                DBMS_OUTPUT.PUT_LINE(DETALII_DEPT(J).NUME);
                DBMS_OUTPUT.PUT_LINE('---');
                DBMS_OUTPUT.PUT_LINE('Salariul maxim: '||DETALII_DEPT(J).SALARIU_MAX);
                --afisam toti angajatii (exista obligatoriu minim 1)
                FOR K IN DETALII_DEPT(J).DETALII_ANGAJATI.FIRST..DETALII_DEPT(J).DETALII_ANGAJATI.LAST LOOP
                    DBMS_OUTPUT.PUT_LINE(DETALII_DEPT(J).DETALII_ANGAJATI(K).NUME
                        || ' '|| DETALII_DEPT(J).DETALII_ANGAJATI(K).SALARIU);
                END LOOP;
            END LOOP;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Casa de discuri nu are departamente sau angajati');
        END IF;
        DBMS_OUTPUT.PUT_LINE('------------------');
        DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN NO_CD THEN RAISE_APPLICATION_ERROR(-20001,'Nu exista casa de discuri cu acel id');
        WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20001,'nu au fost gasite date');
        WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20001,'au fost returnate prea multe linii');
        WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20001,'alta eroare');
    END ABOUT_CASA_DISCURI;

    --dupa nume
    PROCEDURE ABOUT_CASA_DISCURI (CD_NUME IN CASA_DISCURI.NUME%TYPE) IS
        CD_ID CASA_DISCURI.ID_CASA_DISCURI%TYPE;
        VCOUNT NUMBER(1);
        NO_CD EXCEPTION;
    BEGIN
        --DACA EXISTA
        SELECT COUNT(ID_CASA_DISCURI)
        INTO VCOUNT
        FROM CASA_DISCURI
        WHERE UPPER(CASA_DISCURI.NUME) = UPPER(CD_NUME);
        
        --OBLIGATORIU EXISTA MAXIM 1 CD CU ACEL NUME
        IF VCOUNT>0 THEN
            SELECT ID_CASA_DISCURI
            INTO CD_ID
            FROM CASA_DISCURI
            WHERE UPPER(CASA_DISCURI.NUME) = UPPER(CD_NUME);
            ABOUT_CASA_DISCURI(CD_ID);
        ELSE 
            RAISE NO_CD;
        END IF;

    EXCEPTION
        WHEN NO_CD THEN  RAISE_APPLICATION_ERROR(-20001,'Nu exista casa de discuri cu acel nume');       
    END ABOUT_CASA_DISCURI;


--ABOUT ALBUM
    --NUME, NUMELE TRUPEI CARE A LANSAT, TIPUL SI DATA LANSARII DACA EXISTA
    --CE TRUPE AU MAI CONTRIBUIT FOLOSIND FUNCTIA = TABEL INDEXAT, INDEX = ID_TRUPA
    --LUNGIME TOTALA
    --TOATE CANTECELE = TABEL INDEXAT
    
    --dupa id
    PROCEDURE ABOUT_ALBUM (VALBUM_ID IN ALBUM.ID_ALBUM%TYPE) IS
    --declaratii
        NUME_ALBUM ALBUM.NUME%TYPE;
        NUME_TRUPA TRUPA.NUME%TYPE;
        TIP_ALBUM ALBUM.TIP%TYPE;
        DATA_ALBUM ALBUM.DATA_LANSARE%TYPE;
        DURATA_ALBUM CANTEC.LUNGIME%TYPE;
        
        LISTA_ID_TRUPE T_ID_TRUPE_CANTEC;
        TEMP_NUME TRUPA.NUME%TYPE;
        
        TYPE T_FEAT_TRUPE IS TABLE OF NUMBER INDEX BY TRUPA.NUME%TYPE;
        FEAT_TRUPE T_FEAT_TRUPE; --NUMELE TRUPELOR CARE AU CONTRIBUIT, INDEXATE DUPA NUMELE TRUPEI
        --CA SA FIE UNICE
        INDX TRUPA.NUME%TYPE;
        
        TYPE DETALII_CANTEC IS RECORD(
            NUME CANTEC.NUME%TYPE,
            LUNGIME CANTEC.LUNGIME%TYPE);
        
        TYPE T_CANTECE_ALBUM IS TABLE OF DETALII_CANTEC INDEX BY PLS_INTEGER;
        CANTECE_ALBUM T_CANTECE_ALBUM;
        
        VCOUNT NUMBER(2);
        NO_ALBUM EXCEPTION;
        
        CURSOR CANTECE(VID_ALBUM ALBUM.ID_ALBUM%TYPE) IS
            SELECT ID_CANTEC
            FROM CANTEC_ALBUM
            WHERE ID_ALBUM = VID_ALBUM;
        
    BEGIN 
        --DACA EXISTA ALBUMUL
        SELECT COUNT(ID_ALBUM)
        INTO VCOUNT
        FROM ALBUM
        WHERE ID_ALBUM = VALBUM_ID;
        
        IF VCOUNT = 0 THEN
            RAISE NO_ALBUM;
        END IF;
    
        --CAUT NUME, SI RESTUL CHESTIILOR DACA EXISTA
        SELECT A.NUME, T.NUME, TIP, DATA_LANSARE 
        INTO NUME_ALBUM, NUME_TRUPA, TIP_ALBUM, DATA_ALBUM
        FROM ALBUM A
        JOIN TRUPA T ON A.ID_TRUPA = T.ID_TRUPA
        WHERE ID_ALBUM = VALBUM_ID;
        
        --aflam numele trupelor care au contribuit la cantece de pe album, daca exista
        --trec prin toate cantecele, si folosind functia retin in tabel numele trupelor
       
        FOR VCANTEC IN CANTECE(VALBUM_ID) LOOP
            LISTA_ID_TRUPE := TRUPE_CANTEC(VCANTEC.ID_CANTEC);
            IF LISTA_ID_TRUPE.COUNT > 0 THEN --in cazul in care albumul nu are cantece inregistrate sau cantecele nu au trupe inregistrate
                FOR I IN LISTA_ID_TRUPE.FIRST..LISTA_ID_TRUPE.LAST LOOP
                    SELECT NUME
                    INTO TEMP_NUME
                    FROM TRUPA
                    WHERE ID_TRUPA = LISTA_ID_TRUPE(I);
                    IF TEMP_NUME != NUME_TRUPA THEN 
                        FEAT_TRUPE(TEMP_NUME) := 1; --PRACTIC, IMI PASA DOAR DE INDEX
                    END IF;
                END LOOP;
            END IF;
        END LOOP;
        

        --si populez si tabelul de cantece
        SELECT C.NUME, C.LUNGIME
        BULK COLLECT INTO CANTECE_ALBUM
        FROM CANTEC C
        JOIN CANTEC_ALBUM CA ON C.ID_CANTEC = CA.ID_CANTEC
        WHERE ID_ALBUM = VALBUM_ID;
        
        
        --aflam durata totala
        SELECT SUM(LUNGIME)
        INTO DURATA_ALBUM
        FROM CANTEC C
        JOIN CANTEC_ALBUM CA ON CA.ID_CANTEC = C.ID_CANTEC
        WHERE CA.ID_ALBUM = VALBUM_ID;
        
        --AFISAM detaliile albumului
        DBMS_OUTPUT.PUT_LINE(NUME_ALBUM);
        IF TIP_ALBUM IS NOT NULL THEN 
            DBMS_OUTPUT.PUT_LINE('Tip: ' || TIP_ALBUM);
        END IF;
        DBMS_OUTPUT.PUT_LINE('Lansat de: '||NUME_TRUPA);
        
        --FEAT TRUPELE CARE AU CONTRIBUIT
        IF FEAT_TRUPE.COUNT > 0 THEN
            INDX := FEAT_TRUPE.FIRST;
            DBMS_OUTPUT.PUT_LINE('Featuring: '|| INDX);
            INDX := FEAT_TRUPE.NEXT(INDX);
            WHILE INDX IS NOT NULL LOOP
                DBMS_OUTPUT.PUT_LINE('           '|| INDX);
                INDX := FEAT_TRUPE.NEXT(INDX);
            END LOOP;
        END IF;
         IF DATA_ALBUM IS NOT NULL THEN 
            DBMS_OUTPUT.PUT_LINE('Data lansarii: '||DATA_ALBUM);
        END IF;
        DBMS_OUTPUT.PUT_LINE('Durata: '||NVL(DURATA_ALBUM,0)|| ' min');
        DBMS_OUTPUT.PUT_LINE('------------------');
        
        IF CANTECE_ALBUM.COUNT > 0 THEN
            FOR I IN CANTECE_ALBUM.FIRST..CANTECE_ALBUM.LAST LOOP
                DBMS_OUTPUT.PUT_LINE(I||' - '||TO_CHAR(CANTECE_ALBUM(I).LUNGIME, 'FM990.00')||' - '
                    || CANTECE_ALBUM(I).NUME); --+ FORMATARE sa fie mereu 2 zecimale
            END LOOP;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Albumul nu are cantece inregistrate');
        END IF;
        DBMS_OUTPUT.NEW_LINE;
        
    EXCEPTION
        WHEN NO_ALBUM THEN RAISE_APPLICATION_ERROR(-20002,'Nu exista albumul cu acel id');
        WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20002,'nu au fost gasite date');
        WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20002,'au fost returnate prea multe linii');
        WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20002,'alta eroare');
    END ABOUT_ALBUM;
    
    
--    --DUPA NUME
    PROCEDURE ABOUT_ALBUM (VALBUM_NUME IN ALBUM.NUME%TYPE) IS
     VCOUNT NUMBER(2);
     ALBUM_ID ALBUM.ID_ALBUM%TYPE;
     TOO_MANY_ALBUM EXCEPTION;
     NO_ALBUM EXCEPTION;
     BEGIN
        --DACA EXISTA
        SELECT COUNT(ID_ALBUM)
        INTO VCOUNT
        FROM ALBUM
        WHERE UPPER(ALBUM.NUME) = UPPER(VALBUM_NUME);
        
        IF VCOUNT > 1 THEN
            RAISE TOO_MANY_ALBUM;
        END IF;
        
        IF VCOUNT = 1 THEN
            SELECT ID_ALBUM
            INTO ALBUM_ID
            FROM ALBUM
            WHERE UPPER(ALBUM.NUME) = UPPER(VALBUM_NUME);
            ABOUT_ALBUM(ALBUM_ID);
        ELSE 
            RAISE NO_ALBUM;
        END IF;
      EXCEPTION
        WHEN TOO_MANY_ALBUM THEN RAISE_APPLICATION_ERROR(-20002,'Exista mai multe albume cu acel nume. Folositi GASESTE_ALBUM pentru a gasi id-ul albumului pe care il doriti'); 
        WHEN NO_ALBUM THEN RAISE_APPLICATION_ERROR(-20002,'Nu exista albume cu acel nume');   
    END ABOUT_ALBUM;
    
--ABOUT CANTEC
    --NUME, LUNGIME
    --NUMELE MUZICIENILOR (NU TRUPE!) CARE AU CONTRIBUIT LA CANTEC
    -- + POZITIA IN TRUPA } TABEL(ID_TRUPA)CU RECORD(NUME,POZITIE)) -FOLOSIND FUNCTIA
    
    --DUPA ID
    PROCEDURE ABOUT_CANTEC (VCANTEC_ID IN CANTEC.ID_CANTEC%TYPE) IS
        NUME_CANTEC CANTEC.NUME%TYPE;
        LUNGIME_CANTEC CANTEC.LUNGIME%TYPE;
        VCOUNT NUMBER(2);
        NO_CANTEC EXCEPTION;
        
        TYPE R_DETALII_MUZICIENI IS RECORD(
            NUME MUZICIAN.NUME%TYPE,
            POZITIE MEMBRU_TRUPA.POZITIE%TYPE);
        TYPE T_DETALII_MUZICIENI IS TABLE OF R_DETALII_MUZICIENI INDEX BY PLS_INTEGER;
            
        TYPE R_TRUPA_MUZICIENI IS RECORD(
            TRUPA_ID TRUPA.ID_TRUPA%TYPE,
            MUZICIENI T_DETALII_MUZICIENI); --pt fiecare id trupa, numele si pozitia muzicienilor
         TYPE T_TRUPA_MUZICIENI IS TABLE OF R_TRUPA_MUZICIENI INDEX BY PLS_INTEGER;
         
         MUZICIENI_CANTEC T_TRUPA_MUZICIENI;
        
        -- FUNCTIE CARE RETURNEAZA MUZICIENII UNUI CANTEC- SI FOLOSESTE TRUPE_CANTEC
        FUNCTION F_MUZICIENI_CANTEC (VID_CANTEC CANTEC.ID_CANTEC%TYPE)
            RETURN  T_TRUPA_MUZICIENI IS
            TRUPA_MUZICIENI T_TRUPA_MUZICIENI;
            ID_TRUPE_CANTEC T_ID_TRUPE_CANTEC;
        BEGIN
            ID_TRUPE_CANTEC := TRUPE_CANTEC(VID_CANTEC); --aici am id-urile trupelor care au contribuit la acest cantec
            IF ID_TRUPE_CANTEC.COUNT>0 THEN --in caz ca cantecul nu are trupe inregistrate
                FOR I IN ID_TRUPE_CANTEC.FIRST..ID_TRUPE_CANTEC.LAST LOOP
                    TRUPA_MUZICIENI(I).TRUPA_ID := ID_TRUPE_CANTEC(I);--PENTRU FIECARE ID DE TRUPA
                    SELECT M.NUME, MT.POZITIE --IMI PUN TOTI MUZICIENII TRUPEI
                    BULK COLLECT INTO TRUPA_MUZICIENI(I).MUZICIENI
                    FROM MUZICIAN M
                    JOIN MEMBRU_TRUPA MT ON M.ID_MUZICIAN = MT.ID_MUZICIAN
                    WHERE MT.ID_TRUPA = ID_TRUPE_CANTEC(I);
                END LOOP;
            END IF;
            RETURN TRUPA_MUZICIENI;
        END F_MUZICIENI_CANTEC;

    BEGIN
        --DACA EXISTA CANTECTUL
        SELECT COUNT(ID_CANTEC)
        INTO VCOUNT
        FROM CANTEC
        WHERE ID_CANTEC = VCANTEC_ID;
        
        IF VCOUNT = 0 THEN
            RAISE NO_CANTEC;
        END IF;
            
        --CAUT NUME, SI RESTUL CHESTIILOR DACA EXISTA
        SELECT NUME, LUNGIME 
        INTO NUME_CANTEC, LUNGIME_CANTEC
        FROM CANTEC C
        WHERE ID_CANTEC = VCANTEC_ID;
        
        --POPULEZ TABELUL CU DETALIILE MUZICIENILOR
        MUZICIENI_CANTEC := F_MUZICIENI_CANTEC(VCANTEC_ID);
        
         --AFISEZ FRUMOS
        DBMS_OUTPUT.PUT_LINE(NUME_CANTEC);
        DBMS_OUTPUT.PUT_LINE('Durata: '||TO_CHAR(LUNGIME_CANTEC,'FM9990.00')||' min');
        DBMS_OUTPUT.PUT_LINE('-------------------');
        DBMS_OUTPUT.PUT_LINE('Credits:');
        IF MUZICIENI_CANTEC.COUNT > 0 THEN
            FOR I IN MUZICIENI_CANTEC.FIRST..MUZICIENI_CANTEC.LAST LOOP
                FOR J IN MUZICIENI_CANTEC(I).MUZICIENI.FIRST..MUZICIENI_CANTEC(I).MUZICIENI.LAST LOOP
                    DBMS_OUTPUT.PUT_LINE(MUZICIENI_CANTEC(I).MUZICIENI(J).NUME ||' - '|| 
                           MUZICIENI_CANTEC(I).MUZICIENI(J).POZITIE  );
                END LOOP;
            END LOOP;
        ELSE DBMS_OUTPUT.PUT_LINE('Cantecul nu are muzicieni inregistrati');
        END IF;
        
        
     EXCEPTION
        WHEN NO_CANTEC THEN RAISE_APPLICATION_ERROR(-20003,'Nu exista cantec cu acel id');
        WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20003,'nu au fost gasite date');
        WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR (-20003,'au fost returnate prea multe linii');
        --WHEN OTHERS THEN RAISE_APPLICATION_ERROR (-20003,'alta eroare');    
    
    END ABOUT_CANTEC;

    --dupa nume
    PROCEDURE ABOUT_CANTEC (VCANTEC_NUME IN CANTEC.NUME%TYPE) IS
     VCOUNT NUMBER(2);
     CANTEC_ID CANTEC.ID_CANTEC%TYPE;
     TOO_MANY_CANTEC EXCEPTION;
     NO_CANTEC EXCEPTION;
     BEGIN
        --DACA EXISTA
        SELECT COUNT(ID_CANTEC)
        INTO VCOUNT
        FROM CANTEC
        WHERE UPPER(CANTEC.NUME) = UPPER(VCANTEC_NUME);
        
        IF VCOUNT > 1 THEN
            RAISE TOO_MANY_CANTEC;
        END IF;
        
        IF VCOUNT = 1 THEN
            SELECT ID_CANTEC
            INTO CANTEC_ID
            FROM CANTEC
            WHERE UPPER(CANTEC.NUME) = UPPER(VCANTEC_NUME);
            ABOUT_CANTEC(CANTEC_ID);
        ELSE 
            RAISE NO_CANTEC;
        END IF;
      EXCEPTION
        WHEN TOO_MANY_CANTEC THEN RAISE_APPLICATION_ERROR(-20003,'Exista mai multe cantece cu acel nume. Folositi GASESTE_CANTEC pentru a gasi id-ul cantecului pe care il doriti'); 
        WHEN NO_CANTEC THEN RAISE_APPLICATION_ERROR(-20003,'Nu exista cantece cu acel nume');   
    END ABOUT_CANTEC;
 
--procedurile de gasit id-uri la album si cantec
    PROCEDURE GASESTE_ALBUM (VALBUM_NUME IN ALBUM.NUME%TYPE) IS
        NO_ALBUM EXCEPTION;
        VCOUNT NUMBER(2);

        CURSOR ALBUME( VNUME IN ALBUM.NUME%TYPE) IS
            SELECT A.ID_ALBUM, A.NUME, T.NUME AS NUME_TRUPA, TIP 
            FROM ALBUM A
            JOIN TRUPA T ON A.ID_TRUPA = T.ID_TRUPA
            WHERE UPPER(A.NUME) = UPPER(VNUME);
        
        BEGIN
            SELECT COUNT(ID_ALBUM)
            INTO VCOUNT
            FROM ALBUM
            WHERE UPPER(ALBUM.NUME) = UPPER(VALBUM_NUME);
            
            IF VCOUNT = 0 THEN
                RAISE NO_ALBUM;
            END IF;
                        
            FOR ALBM IN ALBUME(VALBUM_NUME) LOOP
                DBMS_OUTPUT.PUT_LINE('ID: '||ALBM.ID_ALBUM);
                DBMS_OUTPUT.PUT_LINE('Nume: '||ALBM.NUME);
                DBMS_OUTPUT.PUT_LINE('Nume trupa: '||ALBM.NUME_TRUPA);
                DBMS_OUTPUT.PUT_LINE('Tip: '||ALBM.TIP);
                DBMS_OUTPUT.NEW_LINE;
            END LOOP;
        EXCEPTION
            WHEN NO_ALBUM THEN RAISE_APPLICATION_ERROR(-20022,'Nu exista albume cu acel nume');   
        END GASESTE_ALBUM;

    PROCEDURE GASESTE_CANTEC (VCANTEC_NUME IN CANTEC.NUME%TYPE) IS
        NO_CANTEC EXCEPTION;
        VCOUNT NUMBER(2);

        CURSOR CANTECE( VNUME IN CANTEC.NUME%TYPE) IS
            SELECT ID_CANTEC, NUME, LUNGIME
            FROM CANTEC C
            WHERE UPPER(C.NUME) = UPPER(VNUME);
            
        CURSOR NUME_TRUPE (VID_CANTEC CANTEC.ID_CANTEC%TYPE) IS
            SELECT NUME
            FROM TRUPA T
            JOIN TRUPA_CANTEC TC ON TC.ID_TRUPA = T.ID_TRUPA
            WHERE TC.ID_CANTEC = VID_CANTEC;
        
        BEGIN
            SELECT COUNT(ID_CANTEC)
            INTO VCOUNT
            FROM CANTEC
            WHERE UPPER(CANTEC.NUME) = UPPER(VCANTEC_NUME);
            
            IF VCOUNT = 0 THEN
                RAISE NO_CANTEC;
            END IF;
                        
            FOR CT IN CANTECE(VCANTEC_NUME) LOOP
                DBMS_OUTPUT.PUT_LINE('ID: '||CT.ID_CANTEC);
                DBMS_OUTPUT.PUT_LINE('Nume: '||CT.NUME);
                DBMS_OUTPUT.PUT_LINE('Lungime: '||TO_CHAR(CT.LUNGIME,'FM9990.00')||' min');
                DBMS_OUTPUT.PUT_LINE('Trupe: ');
                FOR CTT IN NUME_TRUPE(CT.ID_CANTEC) LOOP
                    DBMS_OUTPUT.PUT_LINE(CTT.NUME);
                END LOOP;
                DBMS_OUTPUT.NEW_LINE;
            END LOOP;
        EXCEPTION
            WHEN NO_CANTEC THEN RAISE_APPLICATION_ERROR(-20033,'Nu exista cantece cu acel nume');   
        END GASESTE_CANTEC;
        
END EX13;
/
BEGIN
    EX13.ABOUT_CANTEC('ONLINE');
END;
/

